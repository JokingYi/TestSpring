<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd">
       
    <util:list id="songLists" value-type="java.lang.String">
    	<value>song1</value>
    	<value>song2</value>
    	<value>song3</value>
    </util:list>
   
	<!-- 当需要用到动态装配时，要用到SpEL -->
	<bean id="stage" class="com.lzh.beans.Stage" factory-method="getInstance"/>
	<bean id="auditorium" class="com.lzh.beans.Auditorium"
		init-method="turnOnLight" destroy-method="turnOffLight" />
	<bean id="instrumentlist" class="com.lzh.beans.Instrumentlist"/>
	<bean id="pinao2" class="com.lzh.beans.Pinao" lazy-init="true"/>
	<bean id="pinao" class="com.lzh.beans.Pinao" lazy-init="true"/>
	<!-- <bean id="guitar" class="com.lzh.beans.Guitar" /> -->

	<bean id="duke" class="com.lzh.beans.Juggler" />
	<bean id="oneManBand" class="com.lzh.beans.OneManBand">
		<property name="instruments">
			<list>
				<ref bean="pinao" />
				<!-- <ref bean="guitar" /> -->
			</list>
		</property>
	</bean>
	<!--注意，可以调用方法  -->
	<!-- <bean id="simulate" class="com.lzh.beans.Simulate" p:song="#{instrumentlist.song.substring(0, 3)}"/> -->
	<bean id="simulate" class="com.lzh.beans.Simulate"/><!-- p:song="#{songLists[1]}"  --><!--可以使用Spel语言来达到p的类似效果  -->
	
	<bean id="audience" class="com.lzh.beans.Audience"/>
	<bean id="magician" class="com.lzh.beans.Magician"/>
	<bean id="volunteer" class="com.lzh.beans.Volunteer"/>
	
	<bean id="aboutIntroduction" class="com.lzh.beans.AboutIntroduction"/>
	
	<!--when use string key, its suggested to use namespace-->
	<!--method injection  -->
	<bean id="injection.method.tissue" class="com.lzh.beans.Tissue" scope="prototype"/>
	<bean id="injection.method.dryHands" class="com.lzh.beans.DryHands">
		<lookup-method name="getOne" bean="injection.method.tissue"/>
		<!--false，抛出异常  -->
		<!-- <lookup-method name="getOne">
			<bean class="com.lzh.beans.Tissue" scope="prototype"/>
		</lookup-method> -->
	</bean>
	
	<aop:config>
		<aop:aspect ref="audience">
			<!-- pointcut  -->
			<aop:pointcut id="points1" expression="execution(* com.lzh.inter.Performer.perform(..)) and !bean(oneManBand)"/>
			<aop:before pointcut="execution(* com.lzh.inter.Performer.perform(..))" method="takeSeats"/>
			
			<aop:after-returning pointcut="execution(* com.lzh.inter.Performer.perform(..))" method="applaud"/>
			
			<aop:after-throwing pointcut="execution(* com.lzh.inter.Performer.perform(..))" method="demandFund"/>
			
			<!-- 	advice  -->
			<aop:around method="watchPerformance" pointcut-ref="points1"/>
		</aop:aspect>
		<!-- 
		<aop:aspect ref="magician">
			<aop:pointcut id="thinking" expression="execution(* com.lzh.inter.Thinker.thinkOfSomething(String)) and args(thoughts)"/>
			 
			<aop:before method="interceptThoughts" pointcut-ref="thinking" arg-names="thoughts"/>
		</aop:aspect> -->
		
		<!-- <aop:aspect>
			<aop:declare-parents
					types-matching="com.lzh.inter.Performer+" 
					implement-interface="com.lzh.inter.Contestant" 
					delegate-ref="aboutIntroduction"
					/>
		</aop:aspect> -->
	</aop:config>
</beans>